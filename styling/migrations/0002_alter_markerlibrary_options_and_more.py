# Generated by Django 5.1.7 on 2025-03-24 17:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('styling', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='markerlibrary',
            options={'ordering': ['name'], 'verbose_name': 'Marker', 'verbose_name_plural': 'Marker Library'},
        ),
        migrations.AlterModelOptions(
            name='popuptemplate',
            options={'ordering': ['name'], 'verbose_name': 'Popup Template', 'verbose_name_plural': 'Popup Templates'},
        ),
        migrations.AddField(
            model_name='markerlibrary',
            name='category',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='markerlibrary',
            name='default_anchor',
            field=models.CharField(default='center', help_text="Anchor position (e.g., 'center', 'bottom')", max_length=50),
        ),
        migrations.AddField(
            model_name='markerlibrary',
            name='default_color',
            field=models.CharField(blank=True, help_text="Default color (e.g., '#FF5500')", max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='markerlibrary',
            name='default_size',
            field=models.IntegerField(default=24, help_text='Size in pixels'),
        ),
        migrations.AddField(
            model_name='markerlibrary',
            name='tags',
            field=models.CharField(blank=True, help_text='Comma-separated tags for searching', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='popuptemplate',
            name='css_styles',
            field=models.TextField(blank=True, help_text='Optional CSS styles for the popup', null=True),
        ),
        migrations.AddField(
            model_name='popuptemplate',
            name='include_zoom_to_feature',
            field=models.BooleanField(default=True, help_text='Add a button to zoom to the feature'),
        ),
        migrations.AddField(
            model_name='popuptemplate',
            name='max_height',
            field=models.IntegerField(default=400, help_text='Maximum height of the popup in pixels'),
        ),
        migrations.AddField(
            model_name='popuptemplate',
            name='max_width',
            field=models.IntegerField(default=300, help_text='Maximum width of the popup in pixels'),
        ),
        migrations.AlterField(
            model_name='markerlibrary',
            name='icon_type',
            field=models.CharField(choices=[('image', 'Image'), ('svg', 'SVG'), ('font', 'Font Icon'), ('emoji', 'Emoji'), ('circle', 'Circle'), ('custom', 'Custom HTML')], default='image', max_length=50),
        ),
        migrations.AlterField(
            model_name='popuptemplate',
            name='field_mappings',
            field=models.JSONField(blank=True, default=dict, help_text='JSON mapping of template placeholders to feature properties'),
        ),
        migrations.AlterField(
            model_name='popuptemplate',
            name='html_template',
            field=models.TextField(help_text='HTML template with placeholders like {{field_name}}'),
        ),
        migrations.CreateModel(
            name='ColorPalette',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('colors', models.JSONField(default=list, help_text='List of colors in the palette')),
                ('palette_type', models.CharField(choices=[('sequential', 'Sequential'), ('diverging', 'Diverging'), ('qualitative', 'Qualitative'), ('custom', 'Custom')], default='custom', max_length=50)),
                ('is_system', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Color Palette',
                'verbose_name_plural': 'Color Palettes',
                'db_table': 'color_palettes_wiroi_online',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StyleLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('style_definition', models.JSONField(default=dict, help_text='JSON style definition following Leaflet/Mapbox standards')),
                ('style_type', models.CharField(choices=[('point', 'Point Style'), ('line', 'Line Style'), ('polygon', 'Polygon Style'), ('label', 'Label Style'), ('universal', 'Universal Style')], default='universal', max_length=50)),
                ('is_system', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preview_image', models.BinaryField(blank=True, null=True)),
                ('created_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Style',
                'verbose_name_plural': 'Style Library',
                'db_table': 'style_library_wiroi_online',
                'ordering': ['name'],
            },
        ),
    ]
